{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","pokemon","sprite","alt","name","weight","height","CardList","map","pokemonItem","key","id","SearchBox","handleChange","placeholder","onChange","type","App","state","searchString","i","fetch","then","response","json","setState","sprites","front_default","regEx","RegExp","this","filteredPokemon","filter","monster","test","toLowerCase","sort","a","b","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVAGaA,G,MAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAKF,EAAMG,QAAQC,OAAQC,IAAI,YACpC,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,QAClB,2BAAIP,EAAMG,QAAQK,WCLXC,G,MAAW,SAACT,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMG,QAAQO,KAAI,SAACC,GAAD,OACjB,kBAAC,EAAD,CAAMC,IAAKD,EAAYE,GAAIV,QAASQ,UCL/BG,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACxC,OACE,yBAAKf,UAAU,oBACb,2BACEA,UAAU,SACVgB,SAAUF,EACVG,KAAK,OACLF,YAAaA,OC6CNG,G,wDAjDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXjB,QAAS,GACTkB,aAAc,IAJJ,E,gEASZ,IADmB,IAAD,OACTC,EAAI,EAAGA,EAAI,GAAIA,IACtBC,MAAM,qCAAD,OAAsCD,IAAKE,MAAK,SAACC,GAAD,OACnDA,EAASC,OAAOF,MAAK,SAACrB,GAAD,OACnB,EAAKwB,SAAS,CACZxB,QAAQ,GAAD,mBACF,EAAKiB,MAAMjB,SADT,CAEL,CACEU,GAAIV,EAAQU,GACZP,KAAMH,EAAQG,KACdC,OAAQJ,EAAQI,OAChBC,OAAQL,EAAQK,OAChBJ,OAAQD,EAAQyB,QAAQC,2B,+BAS5B,IAAD,OACDC,EAAQ,IAAIC,OAAJ,WAAeC,KAAKZ,MAAMC,cAAgB,KAClDY,EAAkBD,KAAKZ,MAAMjB,QAChC+B,QAAO,SAACC,GACP,OAAOL,EAAMM,KAAKD,EAAQ7B,KAAK+B,kBAEhCC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1B,GAAK2B,EAAE3B,MAC3B,OACE,yBAAKZ,UAAU,OACb,8CACA,kBAAC,EAAD,CACEc,aAAc,SAAC0B,GAAD,OAAO,EAAKd,SAAS,CAAEN,aAAcoB,EAAEC,OAAOC,SAC5D3B,YAAY,sBAEd,kBAAC,EAAD,CAAUb,QAAS8B,S,GA5CTW,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9583a398.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img src={props.pokemon.sprite} alt=\"monster\" />\n      <h1>{props.pokemon.name}</h1>\n      <p>{props.pokemon.weight}</p>\n      <p>{props.pokemon.height}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.pokemon.map((pokemonItem) => (\n        <Card key={pokemonItem.id} pokemon={pokemonItem} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ handleChange, placeholder }) => {\n  return (\n    <div className=\"search-container\">\n      <input\n        className=\"search\"\n        onChange={handleChange}\n        type=\"text\"\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemon: [],\n      searchString: \"\",\n    };\n  }\n\n  componentDidMount() {\n    for (let i = 0; i < 21; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}`).then((response) =>\n        response.json().then((pokemon) =>\n          this.setState({\n            pokemon: [\n              ...this.state.pokemon,\n              {\n                id: pokemon.id,\n                name: pokemon.name,\n                weight: pokemon.weight,\n                height: pokemon.height,\n                sprite: pokemon.sprites.front_default,\n              },\n            ],\n          })\n        )\n      );\n    }\n  }\n\n  render() {\n    const regEx = new RegExp(`^${this.state.searchString}`, \"i\");\n    const filteredPokemon = this.state.pokemon\n      .filter((monster) => {\n        return regEx.test(monster.name.toLowerCase());\n      })\n      .sort((a, b) => a.id - b.id);\n    return (\n      <div className=\"App\">\n        <h1>Pokemon Search</h1>\n        <SearchBox\n          handleChange={(e) => this.setState({ searchString: e.target.value })}\n          placeholder=\"select monster...\"\n        />\n        <CardList pokemon={filteredPokemon} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}